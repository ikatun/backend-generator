import fs from 'fs';
import makeDir from 'make-dir';
import path from 'path';

import { findBetween, replaceBetween } from './helpers/find-between';

function insertOldContent(newContent: string, oldContent: string, start: string, end: string) {
  const contentToKeep = findBetween(oldContent, start, end);
  if (!contentToKeep) {
    return newContent;
  }

  return replaceBetween(newContent, start, end, contentToKeep);
}

function cleanUp(data: string) {
  return data.replace(/\n\n+/g, '\n\n').replace(/{\n\n/g, '{\n').replace(/\n\n}/g, '\n}');
}

const keepingTags = [
  {
    start: '// <keep-methods>',
    end: '// </keep-methods>',
  },
  {
    start: '// <keep-imports>',
    end: '// </keep-imports>',
  },
  {
    start: '// <keep-update-code>',
    end: '// </keep-update-code>',
  },
  {
    start: '// <keep-decorators>',
    end: '// </keep-decorators>',
  },
];
const autogeneratedWarning = `/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/`;

export async function writeToFile(data: string, dirName: string, name: string, overwrite: boolean) {
  await makeDir(dirName);

  const filePath = path.join(dirName, name);

  if (!overwrite && fs.existsSync(filePath)) {
    console.info(`skipping ${name} because it already exists`);

    return;
  }

  let newContent;
  try {
    const oldContent = fs.readFileSync(filePath, 'utf8');
    newContent = cleanUp(data);
    for (const { start, end } of keepingTags) {
      newContent = insertOldContent(newContent, oldContent, start, end);
    }
  } catch (e) {
    newContent = cleanUp(data);
  }

  console.log('writing to file', filePath);
  fs.writeFileSync(filePath, overwrite ? `${autogeneratedWarning}\n${newContent}` : newContent, {
    encoding: 'utf8',
  });
}
